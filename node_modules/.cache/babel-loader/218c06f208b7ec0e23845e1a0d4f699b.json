{"ast":null,"code":"var _jsxFileName = \"/Users/nizamettinkaya/Desktop/Task Tracker/task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport CreateTask from \"./components/CreateTask\";\nimport Header from \"./components/Header\";\nimport TaskList from \"./components/TaskList\";\nimport { initialState } from \"./store/initialStates\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState(initialState);\n  const [isTaskBarShowed, setIsTaskBarShowed] = useState(false); // Create a task\n\n  const onCreate = task => {\n    const id = Date.now();\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks(prevState => [...prevState, newTask]);\n  }; // Delete Task\n\n\n  const onDelete = deletedItemID => setTasks(tasks.filter(task => task.id !== deletedItemID)); // Toggle Done\n\n\n  const toggleDone = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      isDone: !task.isDone\n    } : task));\n  }; // Toggle Show and hide\n\n\n  const toggleShow = () => setIsTaskBarShowed(prevState => !prevState);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"Task Tracker\",\n      isTaskBarShowed: isTaskBarShowed,\n      toggleShow: toggleShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), isTaskBarShowed && /*#__PURE__*/_jsxDEV(CreateTask, {\n      onCreate: onCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 27\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: tasks,\n      onDelete: onDelete,\n      toggleDone: toggleDone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Task to show\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"PKpOZb6TV15ZDfcR6H3QjuIk9M8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nizamettinkaya/Desktop/Task Tracker/task-tracker/src/App.js"],"names":["useState","CreateTask","Header","TaskList","initialState","App","tasks","setTasks","isTaskBarShowed","setIsTaskBarShowed","onCreate","task","id","Date","now","newTask","prevState","onDelete","deletedItemID","filter","toggleDone","map","isDone","toggleShow","length"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,YAAT,QAA6B,uBAA7B;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACI,YAAD,CAAlC;AACA,QAAM,CAACI,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,KAAD,CAAtD,CAFa,CAIb;;AACA,QAAMU,QAAQ,GAAIC,IAAD,IAAU;AACzB,UAAMC,EAAE,GAAGC,IAAI,CAACC,GAAL,EAAX;AACA,UAAMC,OAAO,GAAG;AAAEH,MAAAA,EAAF;AAAM,SAAGD;AAAT,KAAhB;AACAJ,IAAAA,QAAQ,CAAES,SAAD,IAAe,CAAC,GAAGA,SAAJ,EAAeD,OAAf,CAAhB,CAAR;AACD,GAJD,CALa,CAWb;;;AACA,QAAME,QAAQ,GAAIC,aAAD,IACfX,QAAQ,CAACD,KAAK,CAACa,MAAN,CAAcR,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYM,aAAnC,CAAD,CADV,CAZa,CAeb;;;AACA,QAAME,UAAU,GAAIR,EAAD,IAAQ;AACzBL,IAAAA,QAAQ,CACND,KAAK,CAACe,GAAN,CAAWV,IAAD,IACRA,IAAI,CAACC,EAAL,KAAYA,EAAZ,GAAiB,EAAE,GAAGD,IAAL;AAAWW,MAAAA,MAAM,EAAE,CAACX,IAAI,CAACW;AAAzB,KAAjB,GAAqDX,IADvD,CADM,CAAR;AAKD,GAND,CAhBa,CAwBb;;;AACA,QAAMY,UAAU,GAAG,MAAMd,kBAAkB,CAAEO,SAAD,IAAe,CAACA,SAAjB,CAA3C;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,KAAK,EAAE,cADT;AAEE,MAAA,eAAe,EAAER,eAFnB;AAGE,MAAA,UAAU,EAAEe;AAHd;AAAA;AAAA;AAAA;AAAA,YADF,EAMGf,eAAe,iBAAI,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEE;AAAtB;AAAA;AAAA;AAAA;AAAA,YANtB,EAQGJ,KAAK,CAACkB,MAAN,GAAe,CAAf,gBACC,QAAC,QAAD;AAAU,MAAA,KAAK,EAAElB,KAAjB;AAAwB,MAAA,QAAQ,EAAEW,QAAlC;AAA4C,MAAA,UAAU,EAAEG;AAAxD;AAAA;AAAA;AAAA;AAAA,YADD,gBAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;GA3CQf,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\";\nimport \"./App.css\";\nimport CreateTask from \"./components/CreateTask\";\nimport Header from \"./components/Header\";\nimport TaskList from \"./components/TaskList\";\nimport { initialState } from \"./store/initialStates\";\n\nfunction App() {\n  const [tasks, setTasks] = useState(initialState);\n  const [isTaskBarShowed, setIsTaskBarShowed] = useState(false);\n\n  // Create a task\n  const onCreate = (task) => {\n    const id = Date.now();\n    const newTask = { id, ...task };\n    setTasks((prevState) => [...prevState, newTask]);\n  };\n\n  // Delete Task\n  const onDelete = (deletedItemID) =>\n    setTasks(tasks.filter((task) => task.id !== deletedItemID));\n\n  // Toggle Done\n  const toggleDone = (id) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, isDone: !task.isDone } : task\n      )\n    );\n  };\n\n  // Toggle Show and hide\n  const toggleShow = () => setIsTaskBarShowed((prevState) => !prevState);\n\n  return (\n    <div className=\"container\">\n      <Header\n        title={\"Task Tracker\"}\n        isTaskBarShowed={isTaskBarShowed}\n        toggleShow={toggleShow}\n      />\n      {isTaskBarShowed && <CreateTask onCreate={onCreate} />}\n\n      {tasks.length > 0 ? (\n        <TaskList tasks={tasks} onDelete={onDelete} toggleDone={toggleDone} />\n      ) : (\n        <p>No Task to show</p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}